{"version":3,"sources":["logo.svg","demo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Demo","usePosition","latitude","longitude","timestamp","accuracy","error","App","className","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"sJAAAA,EAAOC,QAAU,IAA0B,kC,oHCG9BC,EAAO,WACnB,IADyB,EAEmCC,uBAD9C,GACNC,EAFiB,EAEjBA,SAAUC,EAFO,EAEPA,UAAWC,EAFJ,EAEIA,UAAWC,EAFf,EAEeA,SAAUC,EAFzB,EAEyBA,MAIlD,OACC,2CACYJ,EACX,6BAFD,cAGaC,EACZ,6BAJD,cAKaC,EACZ,6BAND,aAOYC,GAAQ,UAAOA,EAAP,KACnB,6BARD,UASSC,ICNIC,MARf,WACC,OACC,yBAAKC,UAAU,OACd,kBAAC,EAAD,QCIGC,EAAcC,QACU,cAA7BC,OAAOC,SAASC,UAEc,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2DA4CH,SAASC,EAAgBC,EAAOC,GAC/BC,UAAUC,cACRC,SAASJ,GACTK,MAAK,SAAAC,GACLA,EAAaC,cAAgB,WAC5B,IAAMC,EACLF,EAAaG,WACU,MAApBD,IAGJA,EAAiBE,cAAgB,WAG/B,cADAF,EAAiBG,QAIhBT,UAAUC,cACRS,YAKFC,QAAQC,IACP,iHAMAb,GACAA,EAAOc,UAEPd,EAAOc,SACNT,KAOFO,QAAQC,IACP,sCAKAb,GACAA,EAAOe,WAEPf,EAAOe,UACNV,WAQNW,OAAM,SAAA3B,GACNuB,QAAQvB,MACP,4CACAA,MCrHJ4B,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDYlB,SAAkBrB,GACxB,GAEC,kBAAmBC,UAClB,CAMD,GAJkB,IAAIqB,IACrBC,GACA7B,OAAOC,SAAS6B,MAEHC,SAAW/B,OAAOC,SAAS8B,OAIxC,OAGD/B,OAAOgC,iBAAiB,QAAQ,WAC/B,IAAM3B,EAAK,UAAMwB,GAAN,sBAEP/B,IAsFP,SAAiCO,EAAOC,GAEvC2B,MAAM5B,EAAO,CACZ6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IACpC,gBAGoB,MAApBF,EAASG,QACO,MAAfF,IAEE,IADFA,EAAYG,QAAQ,cAIrBhC,UAAUC,cAAcgC,MAAM9B,MAC7B,SAAAC,GACCA,EACE8B,aACA/B,MAAK,WACLV,OAAOC,SAASyC,eAMpBtC,EAAgBC,EAAOC,MAGxBgB,OAAM,WACNJ,QAAQC,IACP,oEArHAwB,CAAwBtC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WAClCQ,QAAQC,IACP,iHAMFf,EAAgBC,EAAOC,OCxC3BE,K","file":"static/js/main.18a9d4f3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { usePosition } from \"use-position\";\n\nexport const Demo = () => {\n\tconst watch = true;\n\tconst { latitude, longitude, timestamp, accuracy, error } = usePosition(\n\t\twatch\n\t);\n\n\treturn (\n\t\t<code>\n\t\t\tlatitude: {latitude}\n\t\t\t<br />\n\t\t\tlongitude: {longitude}\n\t\t\t<br />\n\t\t\ttimestamp: {timestamp}\n\t\t\t<br />\n\t\t\taccuracy: {accuracy && `${accuracy}m`}\n\t\t\t<br />\n\t\t\terror: {error}\n\t\t</code>\n\t);\n};\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { Demo } from \"./demo\";\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Demo />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === \"localhost\" ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === \"[::1]\" ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\nexport function register(config) {\n\tif (\n\t\tprocess.env.NODE_ENV === \"production\" &&\n\t\t\"serviceWorker\" in navigator\n\t) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\tprocess.env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener(\"load\", () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\"This web app is being served cache-first by a service \" +\n\t\t\t\t\t\t\t\"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker =\n\t\t\t\t\tregistration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (\n\t\t\t\t\t\tinstallingWorker.state ===\n\t\t\t\t\t\t\"installed\"\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tnavigator.serviceWorker\n\t\t\t\t\t\t\t\t.controller\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"New content is available and will be used when all \" +\n\t\t\t\t\t\t\t\t\t\"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tconfig &&\n\t\t\t\t\t\t\t\tconfig.onUpdate\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(\n\t\t\t\t\t\t\t\t\tregistration\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t\"Content is cached for offline use.\"\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tconfig &&\n\t\t\t\t\t\t\t\tconfig.onSuccess\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(\n\t\t\t\t\t\t\t\t\tregistration\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error(\n\t\t\t\t\"Error during service worker registration:\",\n\t\t\t\terror\n\t\t\t);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { \"Service-Worker\": \"script\" }\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get(\n\t\t\t\t\"content-type\"\n\t\t\t);\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null &&\n\t\t\t\t\tcontentType.indexOf(\"javascript\") ===\n\t\t\t\t\t\t-1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(\n\t\t\t\t\tregistration => {\n\t\t\t\t\t\tregistration\n\t\t\t\t\t\t\t.unregister()\n\t\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t\"No internet connection found. App is running in offline mode.\"\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif (\"serviceWorker\" in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}